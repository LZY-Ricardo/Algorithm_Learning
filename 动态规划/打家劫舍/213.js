// 213. 打家劫舍 II
// 你是一个专业的小偷，计划偷窃沿街的房屋，
// 每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，
// 这意味着第一个房屋和最后一个房屋是紧挨着的。
// 同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。
// 给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。
/**
 * @param {number[]} nums - 表示每个房屋存放的金额
 * @return {number} - 表示在不触动警报的情况下，能够抢劫到的最大金额
 * @description 这个问题是打家劫舍的环形版本，意味着第一个房屋和最后一个房屋是相邻的，不能同时抢劫
 */
var rob = function(nums) {
    // 处理特殊情况：如果只有一个房屋，直接返回该房屋的金额
    if (nums.length == 1) return nums[0]

    let len = nums.length 

    // dp1表示不抢劫最后一个房屋的情况下，抢劫前len-1个房屋能获得的最大金额
    dp1 = new Array(len - 1).fill(0)
    // dp2表示不抢劫第一个房屋的情况下，抢劫后len-1个房屋能获得的最大金额
    dp2 = new Array(len - 1).fill(0)

    // 初始化dp1
    dp1[0] = nums[0]  // 抢劫第一个房屋
    dp1[1] = Math.max(nums[0], nums[1])  // 抢劫第一个或第二个房屋，取较大值

    // 初始化dp2
    dp2[0] = nums[1]  // 抢劫第二个房屋
    dp2[1] = Math.max(nums[1], nums[2])  // 抢劫第二个或第三个房屋，取较大值

    // 填充dp1数组
    for (let i = 2; i < len - 1; i++) {
        // 状态转移方程：要么不抢劫当前房屋，要么抢劫当前房屋但不抢劫前一个房屋
        dp1[i] = Math.max(dp1[i - 1], dp1[i - 2] + nums[i])
    }

    // 填充dp2数组
    for (let i = 2; i < len - 1; i++) {
        // 状态转移方程：要么不抢劫当前房屋，要么抢劫当前房屋但不抢劫前一个房屋
        dp2[i] = Math.max(dp2[i - 1], dp2[i - 2] + nums[i + 1])
    }

    // 返回两种情况的最大值
    return Math.max(dp1[len - 2], dp2[len - 2])
}
